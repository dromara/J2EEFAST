fast:
    redis:
        #是否开启redis 内存数据库 <*推荐使用*>
        enabled: true
    #工作流是否开启 如果工作流开启 必须开启 rabbitmq消息队列 否则系统人员 与 角色同步就会有异常
    flowable:
        enabled: true
    #是否演示模式
    demoMode:
        enabled: false
        #配置拦截规则
        post: 'edit,del,remove,clean,updateAvatar,updateUser,add,resetPwd,updatePass,genCode,uploadLic,status,insertAuthRoles'
        get: 'del,remove,clean,dirTreeData'
        urlPatterns: '/sys/*,/tool/*,/file/ueditor/*,/bpm/procdef/*,/bpm/model/*,/bpm/processInstance/*,/gen/test/*'
        ip:
    #是否开启HTTPS false 则以server:port
    ssl:
        enabled: true
    #配置文件yml文件中敏感数据加密key /*注意 数据加密安全性其实是相对的,什么加密如果私钥或者key泄露都是无用,这个世界上没有一种加密方法是绝对安全的。
    #这种加密方法只能做到：防君子不防小人*/
    #此参数可以配置可以不配置,如果不配置则自动获取系统key,或者使用环境变量方式储存，使用启动命令方式,建议不配置key 让系统自己生成 因为系统是生成key是根居机器码,只有这台机器才能解密
    #需要加密的参数 DES{} 包裹 或者 SM4{} 包裹
    encrypt:
        key:
    # 防止XSS攻击
    xss:
        # 过滤开关
        enabled: true
        # 排除链接（多个用逗号分隔）
        excludes: /sys/notice/*,/sys/database/add
        # 匹配链接
        urlPatterns: /sys/*,/tool/*
########################License认证相关#####################
#License相关配置
license:
    #主题
    subject: fastOS
    #公钥别称
    publicAlias: j2eefastCert
    #访问公钥的密码
    storePass: j2eefast.com
    #license位置 如果不是绝对地址 则会找项目资源路径
    licensePath: license/license.lic
    #公钥位置 如果不是绝对地址 则会找项目资源路径
    publicKeysStorePath: license/publicCerts.keystore

    ######生成许可证书信息 *此信息应当绝对保密 正式项目应该分离单独存放用于生成许证书*  你可以屏蔽###########
    #私钥库别名
    privateAlias:
    #私钥库密码
    keyPass:
    #私钥库路径
    privateKeysStorePath:
########################License认证相关#####################

spring:
    datasource:
        #默认(主)数据库配置
        master:
            driverClassName: com.mysql.cj.jdbc.Driver
            url:
            username:
            password:
            filters: mergeStat
        ###############工作流数据库配置
        flowable:
            driverClassName:
            #从数据库是否开启
            enabled: false
            url:
            username:
            password:
            filters:
    #redis数据库服务器
    redis:
        database: 10
        host:
        port:
        password:        # 密码
        timeout: 6000ms  # 连接超时时长（毫秒）
        jedis:
            pool:
                max-active: 1000  # 连接池最大连接数（使用负值表示没有限制）
                max-wait: -1ms      # 连接池最大阻塞等待时间（使用负值表示没有限制）
                max-idle: 10      # 连接池中的最大空闲连接
                min-idle: 5       # 连接池中的最小空闲连接
    #消息队列
    rabbitmq:
        addresses: ip:5672
        # RabbitMQ 默认的用户名和密码都是guest 而虚拟主机名称是 "/"
        # 如果配置其他虚拟主机地址，需要预先用管控台或者图形界面创建 图形界面地址 http://主机地址:15672
        username:
        password:
        virtual-host: /
        # 是否启用发布者确认 具体确认回调实现见代码
        publisher-confirms: true
        # 是否启用发布者返回 具体返回回调实现见代码
        publisher-returns: true
        # 是否启用强制消息 保证消息的有效监听
        template.mandatory: true
        #消费端配置
        listener:
            simple:
                #消费端
                concurrency: 5
                #最大消费端数
                max-concurrency: 10
                #自动签收auto  手动 manual
                acknowledge-mode: manual
                #限流（海量数据，同时只能过来一条）
                prefetch: 1
mybatis-plus:
    #实体扫描，多个package用逗号或者分号分隔
    type-aliases-package: com.j2eefast.*.*.entity
    #扫描mapper 相当于 @MapperScan 注解,多个逗号分割
    mapper-package: com.j2eefast.*.*.dao

http:
    #port: 8200 #web端口
    port: 80 #web端口
server:
    name: '##################J2eeFAST[生产环境]##############'
    projectName: 'J2eeFAST[生产环境]'
    #port: 8080 #HTTPS端口
    port: 443 #HTTPS端口